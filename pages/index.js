import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Web3 from "web3";
import React, { useEffect, useState } from "react";
import Web3Modal from "web3modal";
import { contract_address, contract_abi, buy_price, speedy_nodes} from '../config';

export default function Home() {
  const [title, setTitle] = useState(1);
  const [walletstatus, set_walletstatus] = useState("Connect Wallet")
  useEffect(() => {
    connect_wallet()
  }, [])
 
  async function connect_wallet(){
    if(Web3.givenProvider){
      const providerOptions = {
        /* See Provider Options Section */
      };
      
      const web3Modal = new Web3Modal({
        network: "mainnet", // optional
        cacheProvider: true, // optional
        providerOptions // required
      });
      
      const provider = await web3Modal.connect();
      const web3 = new Web3(provider);

      web3.eth.net.getId().then((result) => { 
    
      console.log("Network id: "+result)
      if(result !== 1){
          alert("Wrong Network Selected. Select Ethemerun Testnet");
        }
        else{set_walletstatus("Wallet Connected");}
      })

    }else{
      alert("Web3 Not Found");
    }

  }
  async function fetch_data(){

    const web3 = new Web3(speedy_nodes);
    const contract = new web3.eth.Contract(contract_abi, contract_address);
    //await Web3.givenProvider.enable()

    contract.methods.get_total_released_supply().call((err,result) => {
        console.log("error: "+err);
        if(result != null){
           // settotalAvailableSupply(result)
        }
    })
    contract.methods.get_token_count().call((err,result) => {
        if(result != null){
            settokenCount(result)
        }
    })


}
  async function show_error_alert(error){
    let temp_error = error.message.toString();
    console.log(temp_error);
    let error_list = [
      "It's not time yet",
      "Sent Amount Wrong",
      "Max Supply Reached",
      "You have already Claimed Free Nft.",
      "Presale have not started yet.",
      "Presale Ended.",
      "You are not Whitelisted.",
      "Sent Amount Not Enough",
      "Max 20 Allowed.",
      "insufficient funds"
      
    ]
  
    for(let i=0;i<error_list.length;i++){
      if(temp_error.includes(error_list[i])){
       // set ("Transcation Failed")
        alert(error_list[i]);
      }
    }
  }
  async function mint_nft(){

      if(Web3.givenProvider ){ 

        const web3 = new Web3(Web3.givenProvider);
        await Web3.givenProvider.enable()
        const contract = new web3.eth.Contract(contract_abi, contract_address);
        const pricetopay=buy_price*title;
        const addresses = await web3.eth.getAccounts()
        const address = addresses[0]
        console.log("addresses[0]: "+addresses[0])
        // console.log("addresses[1]: "+addresses[1])
        // console.log("Default address: "+await web3.eth.defaultAccount)

        const estemated_Gas = await contract.methods.mint("Bookblocks & Women for Afghan Women October 2021", title).estimateGas({
          from : address, 
          value: web3.utils.toWei(pricetopay.toString(),"ether"),
          maxPriorityFeePerGas: null,
          maxFeePerGas: null
        });
        console.log(estemated_Gas)
        const result = await contract.methods.mint("Bookblocks & Women for Afghan Women October 2021", title).send({
          from : address,
          value: web3.utils.toWei(pricetopay.toString(),"ether"),
          gas: estemated_Gas,
          maxPriorityFeePerGas: null,
          maxFeePerGas: null
        })
       // await contract.methods.tokenByIndex(i).call();
      }

  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main + " wd"}>
      <div className="container">
        <img src="logo.png" />
       
          <label>How many NFTs do you want to mint? Enter 1 (min) to 20 (max)</label>
<input className="form-control form-control-lg mm wd" type='number' defaultValue="1" onChange={event => setTitle(event.target.value)} />

      <button className="btn btn-primary mml" onClick={connect_wallet}>{walletstatus}</button>
      <button className="btn btn-primary" onClick={mint_nft}>Mint NFT</button>
</div>
        
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}
